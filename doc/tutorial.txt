==============================================================================
Tutorial                                                           *plover-vim-tutorial*

quick-install                                                     |plover-vim-quick-install|
quick-setup                                                       |plover-vim-quick-setup|
relative-numbers                                                  |plover-vim-relative-numbers|
Josiah-modifiers                                                  |plover-vim-Josiah-modifiers|
miscellaneous                                                     |plover-vim-miscellaneous|
find-object                                                       |plover-vim-find-object|
command-object                                                    |plover-vim-command-object|

==============================================================================
quick-install                                                      *plover-vim-quick-install*

- Download plover and find the executable
	- see this https://plover.readthedocs.io/en/latest/cli_reference.html for finding the location of plover depending on which platform you are using (Linux, Windows, etc.)
- Now run this command to install the library
<
<plover_executable> -s plover_plugins install plover_vim plover-stenotype-vim

get `escaped_customised.py` and add it to your dictionaries:
https://github.com/Josiah-tan/plover-vim/tree/main/templates/tutor

if you want to try plover-stenotype-vim instead, then select `extended/escaped_customised.py`
in plover gui go select configure → system → plover-stenotype-vim

==============================================================================
quick-setup                                                        *plover-vim-quick-setup*

run the following commands:
>vim
:set relativenumber
:set modifiable
:set scrolloff=9

modifiable → allows you to modify the file
scrolloff = 9 grants ability to see at least 9 lines above/below your cursor
 
in plover gui go tick configure → output → start attached

==============================================================================
relative-numbers                                                   *plover-vim-relative-numbers*

make sure you have done `:set relativenumber` first!

let's start!
now you are going to go to these lines below as according to the relative
numbers specified by <n>
move your cursor to the beginning of the line at |starthere| (below)

<21> press `#TH-R`
<19> press `#TOR`
<17> press `#S-RL` 
<15> press `#S-FR` 
<13> press `#SH-R` 
<11> press `#STR` 
<9>  press `#SOR` 
<7>  press `#-RL`  
<5>  press `#-FR`  
<3>  press `#H-R`  
<1>  press `#T-R`  
<0>  press `#SB`    *starthere* (turn on plover now!)
<2>  press `#PB`   
<4>  press `#AB`   
<6>  press `#-PB`  
<8>  press `#-BT`  
<10> press `#SEUB`   
<12> press `#SP-B` 
<14> press `#SAB`
<16> press `#S-PB` 
<18> press `#S-BT`
<20> press `#STEUB`


<24> congratulations on finishing the relative number challenge!

==============================================================================
Josiah-modifiers                                                   *plover-vim-Josiah-modifiers*

<5> make sure you have learnt Emily modifiers before continuing...
Here we use `-LTZ` as our unique ender (for plover-stenotype-vim use `@`)

{read instructions below}
`ARLTZ` → `A` (end of the line)
write out the sentence with steno...
{write sentence below}: 
<7>
`<7>the brown fox jumps over the lazy dog.`
Why is there no space between `<7>` and `the`?
Plover-vim is built with space suppression which is often more favorable for coding (uses {plover:clear_trans_state} internally)

<5>now let's do some editing!
{read instructions below}
`SKW-RLTZ` → `I` (SKW is left hand fingerspelling)
`TRAO*LTZ` → `escape`
`W-RLTZ` → `W` (next word)
`SKW-LTZ` → `i` (SKW is left hand fingerspelling)
`KWEUBG` → `quick` 
`AO*LTZ` → `space` (performs a space)
{edit the sentence}
<9>the brown fox jumps over the lazy dog.
`<9>the quick brown fox jumps over the lazy dog.`

<3>let's do this again but more efficiently!
How? Well, we use `#` to `prefix` the command with `escape`
{instructions}
`#SKW-RLTZ` → escape I (SKW is left hand `i` for fingerspelling)
`#W-RLTZ` → `W` (next word)
`#SKW-LTZ` → `i` (only required for escaped_customised.py)
`KWEUBG` → `quick` 
`AO*LTZ` → `space` (performs a space)
{write the sentence below}
<9>the brown fox jumps over the lazy dog.
`<8>the quick brown fox jumps over the lazy dog.`

let's learn the rest of left hand fingerspelling (Abby):
`SK-LTZ` → e
`WR-LTZ` → u
{read instructions}
<7>`#SKW-RLTZ` → `escape I` (SKW is left hand `i` for fingerspelling)
`#W-RLTZ × 3` → `W × 3` (next word)
`#SKW-LTZ` → `i` (only required for escaped_customised.py)
`WR-FLTZ` → `control(u)` (deletes to start of line)
`#SK-LTZ` → `e` (end of next word)
`#KP-LTZ` → `x` (delete `k`)
`#SK-RLTZ × 2` → `E × 2` (end of next word)
`#KP-LTZ` → `x` (delete `]`)
{edit sentence}
<9>the quick brown jumpsk over the] lazy dog.
`jumps over the lazy dog.`

let's learn how to do terminal splits using `EU`!
`EU` → `escape control(w)` (wIndow)
<5>{try the following}
`SEULTZ` → escape control(w) s (horizontal split)
`SREULTZ` → escape control(w) v (vertical split)
`OEULTZ` → escape control(w) o (close all windows)

<5>let's have a little bit of fun!
{read instructions}
`#S-R` → `1 down`
`#SKW-RLTZ` → `escape I` (SKW is left hand `i` for fingerspelling)
`SR-FLTZ` → `control(v)` (block-wise visual mode)
`#P-R` → `3 down`
`TKPW-LTZ` → `g`
`AFLTZ` → `control(a)` (increment)
<8>{try the following}
0
0
0
0
`1`
`2`
`3`
`4`
<8> {read below}
Here the available defaults for Josiah modifiers feel free to change to your liking:
prefixes = { "#": "control(j)",
        "E": "escape",  # EscapE
        "EU": "control(j) control(w)",  # vim splIt or wIn
        "#EU": "control(r)",  # regIster
        "U": "control(b)",  # tmUx
        "#E": "control(x)",  # Ex command
        "": "",  # Emily }
<9>

You may be thinking... What on earth is control(j)? That's a very good question
control(j) is basically a vim hack from user2
https://github.com/openstenoproject/plover/discussions/1350#discussioncomment-1905781
it is written below in case you want to chuck it in your vimrc (recommended!)
<6> {go 16 down}
>vim
    "do nothing in normal mode
    nore <c-j> <nop> 
    "escape insert mode, then return to insert mode afterwards
    inore <c-j> <c-\><c-o>
    "escape command mode
    cnoremap <c-j> <esc>
    if !has('nvim')
        " escape terminal mode, then return to terminal mode
        set termwinkey=<c-j>
    else
        " escape terminal mode, does not return to terminal mode :<
        tnoremap <c-j> <C-\><C-n>
    endif
 
<16>

If you have made it this far, well done! Congratulations on completing
Josiah-modifiers!

==============================================================================
miscellaneous                                                    *plover-vim-miscellaneous*

<8> make sure to have completed |plover-vim-Josiah-modifiers| before learning
miscellaneous commands...
What are miscellaneous commands?
Essentially, commands strictly in the form:
`<command><object>`
<5> The commands of the form are not covered:
<command><something-in-the-middle><object>
i.e. `ciw` |plover-vim-command-object|, `dfd` |plover-vim-find-object|
these are covered in later sections of this document

<5> the unique ender for |plover-vim-miscellaneous| is `-TZ` (plover-stenotype-vim: `@G`)
ring finger on `-T` and pinky on `-Z` 
let's first learn `z<object>`
`-FPB` → `z` (ZeN)
<4>{try the following}:
`STKPW-FPBTZ` → `zz` (center screen middle)
`PW-FPBTZ` → `zb` (center screen bottom)
`T-FPBTZ` → `zt` (center screen zt)

z is often also used for folding code
<6> the g command `g<object>`: 
`-F` → `g` (I have no gF)
<2>{read instructions}
`#SR-RLTZ` → `V` (visualise line)
`TRAO*LTZ` → `escape`
`SR-FTZ` → `gv` (go to last highlight)
`TRAO*LTZ` → `escape`
{follow above on sentence below}
<6>highlight me!

Now we learn `r<object>` 
`-P` → `r` (`rePlace`)
<4>{read instructions}
`#SKW-RLTZ` → `escape I` (SKW is left hand `i` for fingerspelling)
`#W-RLTZ` → `W` (forward a word)
`T-PTZ` → `rt` (replace with t)
`W-LTZ × 3` → `w × 3`  (forward 3 words)
`P-FRTZ` → `rP` (replace with P)
`#W-LTZ` → `w` (forward a word)
`SKW-PTZ` → `ri` (replace with i)
{edit sentence}
<9>Remember chat replace uses r on plover-vim...
<9>Remember that replace uses P in plover-vim...

<3>let's learn the `repeat` operation:
`#-P` → `repeat` `(rePeat)`
{read instructions}
`#KWR-PTZ` → `yy` (yank line)
`#P-LTZ` → `p` (paste)
{follow above on sentence below}
<6> without repeat you would have to double tap...
`<6> without repeat you would have to double tap...`
`<6> without repeat you would have to double tap...`

<4> a little bit of revision:
{read instructions}
`#ARLTZ` → A (go to end of the line)
`SK-FTZ` → ge (end of the previous word)
replace with appropriate characters using `-P`
good luck!
{edit sentence}
<7> congratulation] o> learnin} miscellaneoup commands!
`<7> congratulations on learning miscellaneous commands!`

<3> {go down 24 lines}
here are all of the default available commands:
>json
    {
        # 64 total possibilities from #EURPB
        "-FP": "<escape> shift(at) <objects>",  # @
        "#-FP": "<escape> q <objects>",  # liSten
        "-FB": "<escape> c s <objects>",  # Blot Furround
        "#-FB": "<escape> d s <objects>", # Blot Surround
        "-FPB": "<escape> z <objects>",  # ZeN
        "-PB": "<escape> g l <objects>",  # lioN
        "#-PB": "<escape> g shift(L) <objects>",  # lioN
        "-F": "<escape> g <objects>",  # the good Spot (primeagen youtube video on the g command)
        "#-F": "shift(s) <objects>", # Furround
        "-P": "<escape> r <objects>", # replace
        "#-P": "<escape> <objects> <objects>", # repeat
        "-B": "<escape> m <objects>",
        "#-B": "<escape> apostrophe <objects>",

        "-EFP": "<escape> bracketleft <objects>", # ] 
        "-UFP": "<escape> bracketright <objects>", # [ 
        "#EU": "<escape> shift(quotedbl) <objects>", # regIster
    }
 
<24> if this tutorial gets popular in the future, I may make more tutorials for miscellaneous commands covering the rest of the features listed here

==============================================================================
find-object                                                      *plover-vim-find-object*

<5> make sure to have completed |plover-vim-Josiah-modifiers| and
|plover-vim-miscellaneous| before learning find-object...
what is a "find-object" command?
Essentially, commands strictly in the form:
<command><find><object>
the unique ender for |plover-vim-find-object| is `-LTDZ` 
(plover-stenotype-vim: `@LG`)
ring finger on `-LT` and pinky on `-DZ`

<9>Firstly, let's learn how to move left and right to an object...
`U` → `f` (move right to character)
`E` → `F` (move left to character)
this should intuitively make sense because...
U is right of E
E is left of U


alright time for an example!
<9>{read instructions}
`#SKW-RLTZ` → `escape I` (SKW is left hand `i` for fingerspelling)
`KRURLTDZ` → `fC` (forwards to C)
`#TPWR*LTZ` → `~` (toggle case)
`TPHURLTDZ` → `fN` (forwards to N)
`#TPWR*LTZ` → `~` (toggle case)
`HURLTDZ` → `fH` (forwards to H)
`#TPWR*LTZ` → `~` (toggle case)
{edit sentence}
<9>correCt the iNcorrect letters in tHis sentence.
`<9>correct the incorrect letters in this sentence.`

let's do the same thing but backwards!
<4>{read instructions}
`#A-RLTZ` → `escape A` (go end of line)
`TERLTDZ` → `FT` (backwards to T)
`#TPWR*LTZ` → `~` (toggle case)
`KERLTDZ` → `FK` (backwards to K)
`#TPWR*LTZ` → `~` (toggle case)
`TPHERLTDZ` → `FN` (backwards to N)
`#TPWR*LTZ` → `~` (toggle case)
{edit sentence}
<9> correct iNcorrect letters bacKwards in this senTence.
`<9> correct incorrect letters backwards in this sentence.`

Now if you add a `#` to `U` or `E` then something special happens:
`#U` → `t` (move right but exclude character)
`#E` → `T` (move left but exclude character)

In this example we are going to substitute spaces for characters.
<8> {read instructions}
`#SKW-RLTZ` → `escape I` (SKW is left hand `i` for fingerspelling)
`#PULTDZ` → `tp` (forwards to, but excluding p)
`S-PTZ` → `rs` (replace with s)
`#HULTDZ` → `th` (forwards to, but excluding h)
`T-PTZ` → `rt` (replace with t)
`#SKULTDZ` → `te` (forwards to, but excluding e)
`S-PTZ` → `rs` (replace with s)
{edit sentence}
<9>substitute extra  paces in  his  entence.
`<9>substitute extra spaces in this sentence.`

Let's do the same thing but backwards!
<4> {read instructions}
`#A-RLTZ` → `escape A` (go end of line)
`#RELTDZ` → `Tr` (backwards to, but excluding r)
`TK-PTZ` → `rd` (replace with d)
`#PELTDZ` → `Tp` (backwards to, but excluding p)
`A-PTZ` → `ra` (replace with a)
`#PWELTDZ` → `Tb` (backwards to, but excluding b)
`S-PTZ` → `rs` (replace with s)
{edit sentence}
<9>sub titute incorrect sp ces backwar s in this sentence.
`<9>substitute incorrect spaces backwards in this sentence.`

well, moving is pretty neat but wouldn't it be nice to try using the `-FPB` cluster?
`-F` → `v` (Fisualise)
`-P` → `y` (coPy)
`-B` → `c` (Blot)
(I know it's weird but... well... I had to come up with something.)

<9>let's first start with fisualise!
`-F` → `v` (Fisualise)
<2>{read instructions}
`#SKW-RLTZ` → `escape I` (SKW is left hand `i` for fingerspelling)
`SUFLTDZ` → `vfs` (visualise forward s)
`WR-RLTZ` → `U` (uppercase u)
`TRAO*LTZ` → `escape`
`SKWULTDZ` → `fi` (forward i)
`PUFLTDZ` → `vfP` (visualise forward p)
`WR-RLTZ` → `U` (uppercase u)
{edit sentence}
<9>from sales inner join products
`<9>FROM Sales INNER JOIN Products`

let's try blotting (delete)!
`-B` → `d` (Blot)
<5>{read instructions}
`#SKW-RLTZ` → `escape I` (SKW is left hand `i` for fingerspelling)
`RULTDZ × 2` → `fr × 2` (2 forward r)
`#SUBLTDZ` → `dts` (delete to s)
`KWR*ULTDZ` → `f)` (forward `)`)
`#TK*UBLTDZ` → `dt:` (delete to :)
{edit sentence}
<7>for i in range(len(someList)):
`<7>for i in someList:`

the final one: coPying
`-P` → `y` (coPy)
<5>{read instructions}
`#SKW-RLTZ` → `escape I` (SKW is left hand `i` for fingerspelling)
`RULTDZ` → `fr` (forward r)
`#TK*UPLTDZ` → `yt:` (coPy to :)
`#OLTZ` → `o` (new line)
`#PLTZ` → `p` (paste)
{edit sentence}
<7>def reverseLinkedList(head):
`<7>def reverseLinkedList(head):`
`reverseLinkedList(head)`

putting it all together:
<5>{read instructions}
`#SKW-RLTZ` → `escape I` (SKW is left hand `i` for fingerspelling)
`WRULTDZ` → `fu` (forward u)
`#TPHAO*UPLTDZ` → `yt{` (yank forward {)
`#OLTZ` → `o` (new line)
`#PLTZ` → `p` (paste)
`TPH*ELTDZ` → `Fn` (backward n)
`#TPH*EBLTDZ` → `dT(` (delete backward `(`)                                                   ))
{edit sentence}
<9>Node* updateTree(Node* node){}
`<9>Node* updateTree(Node* head){}`
`updateTree(head)`

==============================================================================
command-object                                                   *plover-vim-command-object*

<7> make sure to have completed |plover-vim-Josiah-modifiers| before learning
command-object...

What is command object?
essentially, commands of the form:
`<command><middle><object>`
for example: `ciw`, `gcip`, `ya}`
<7>the unique ender for command object is `-LTSZ` (plover-stenotype-vim: `@L`)
ring finger on `-LT` and pinky on `-SZ`

let's first learn `c<middle><object>`
`-B` → `c` (Blot)
`E` → `i` (inner: closer to the middle of the keyboard)
`U` → `a` (outer: away from the middle of the keyboard)
<7>{read instructions}
`#SKW-RLTZ` → `escape I` (SKW is left hand `i` for fingerspelling)
`#W-RLTZ × 2` → `W × 2` (next word)
`WR-FLTZ` → `control(u)` (deletes to start of line)
`KWR*UBLTSZ` → `ca)` (deletes around parentheses)
{edit sentence}
<6>you think plover-vim is hard to learn? Nah. (not really)
`plover-vim is hard to learn? Nah.`

<3>{read instructions}
`#SKW-RLTZ` → `escape I` (SKW is left hand `i` for fingerspelling)
`KWRO*EBLTSZ` → `ci]` (delete inner bracket)
`KWRAO*UBLTSZ` → `ca}` (delete inner brace)
`#W-RLTZ` → `W` (next word)
`KWRA*EBLTSZ` → `ca>` (delete inner angle bracket)
{edit sentence}
<7> why not[just] use d instead of c? Well {I guess}d <just>is not needed in plover vim...
`<7> why not[] use d instead of c? Well d is not needed in plover vim...`

let's learn how to yank and paste text objects!
`P` → `y` (coPy)
<5>{read instructions}
`#SKW-RLTZ` → `escape I` (SKW is left hand `i` for fingerspelling)
`WURPLTSZ` → `yaW` (yank around word)
`#ARLTZ` → `A` (go to end of line)
`#P-LTZ` → `p` (paste)
<5>
`#PW-RLTZ × 2` → `B × 2` (backwards 2 words)
`WERLTSZ` → `yiw` (yank inner word)
`#ARLTZ` → `A` (go to end of line)
`#P-LTZ` → `p` (paste)
{edit sentence}
<6>yank me 
`<6>yank me <9>yank me`

Let's learn how to visualise (highlight) text objects!
`F` → `v` (Fisualise)
<5>{instructions}
`#SKW-RLTZ` → `escape I` (SKW is left hand `i` for fingerspelling)
`WEFRLTSZ` → `viW` (visualise inner word)
`TPWR*LTZ` → `~` (toggle case)
`#W-RLTZ` → `W` (next word)
`WEFLTSZ` → `viw` (visualise inner word)
`WR-LTZ` → `u` (lowercase)
{edit sentence}
<8>wHAT DOES -F even stand for? Fish? Frisbee? Fisualise?
`<9>What does -F even stand for? Fish? Frisbee? Fisualise?`

let's combine both yank and highlight on braces and brackets.
<4>{instructions}
`#SKW-RLTZ` → `escape I` (SKW is left hand `i` for fingerspelling)
`KWRAO*EPLTSZ` → `yi}` (yank inner brace)
`#S-R` → `down` (down 1 line)
`KWRAO*UFLTSZ` → `va}` (visualise outer brace)
`#P-LTZ` → `p` (paste)
<6>
`#S-B` → `up` (up 1 line)
`KWRO*EPLTSZ` → `yi]` (yank inner bracket)
`#S-R` → `down` (down 1 line)
`KWRO*UFLTSZ` → `va]` (visualise outer bracket)
`P-LTZ` → `p` (paste)
{edit sentence}
<7>`{ we}[ obviously] yank words from here`
why do{} use -P? It's because it[] means coPy...
`why do we use -P? It's because it obviously means coPy...`

The final test... Let's do this
<4>{instructions}
`#SKW-RLTZ` → `escape I` (SKW is left hand `i` for fingerspelling)
`WEFRLTSZ` → `viW` (visualise inner word)
`TPWR*LTZ` → `~` (toggle case)
`#W-RLTZ` → `W` (next word)
`WEFLTSZ` → `viw` (visualise inner word)
`WR-LTZ` → `u` (lowercase)
<7>
`#S-B` → `up` (up 1 line)
`KWRO*EPLTSZ` → `yi]` (yank inner bracket)
`#S-R` → `down` (down 1 line)
`KWRO*UFLTSZ` → `va]` (visualise outer bracket)
`#P-LTZ` → `p` (paste)
<6>
`#S-B` → `up` (up 1 line)
`KWRAO*EPLTSZ` → `yi}` (yank inner brace)
`#S-R` → `down` (down 1 line)
`KWRAO*UFLTSZ` → `va}` (visualise outer brace)
`#P-LTZ` → `p` (paste)
<6>
`#S-B` → `up` (up 1 line)
`KWR*EPLTSZ` → `yi)` (yank inner parenthesis)
`#S-R` → `down` (down 1 line)
`KWR*UFLTSZ` → `va)` (visualise outer parenthesis)
`#P-LTZ` → `p` (paste)
{edit sentence}
`use text here to edit text below: [coPy]{Fisualise}(Blot)`
<8>cONGRATULATIONS YOU have now learnt [yank], {visualise} and (delete)!
`<8>Congratulations you have now learnt coPy, Fisualise and Blot!`

the full list of command object commands are shown below:
<4> {go down 20 lines}
{
"-FPB": "<escape> equal <middles> <objects>",
"-FP": "<escape> y s <middles> <objects>",  # coPy Furround
"-FB": "<escape> shift(greater) <middles> <objects>",  # FB looks like half an > arrow
"-PB": "escape g c <middles> <objects>",  # commeNt
"-F": "<escape> v <middles> <objects>",  # Fisualise
"-P": "<escape> y <middles> <objects>",  # coPy
"-B": "<escape> c <middles> <objects>",  # Blot
"": "<escape> g shift(u) <middles> <objects>",

"#-FPB": "<escape> v <middles> <objects> shift(asciitilde)",
"#-FP": "escape c x <middles> <objects>",  # vim exFPange
"#-FB": "<escape> less <middles> <objects>",
"#-PB": "escape g b <middles> <objects>",
"#-F": "<escape> v <middles> <objects> p",  # visualise and paste!
"#-P": "<escape> shift(quotedbl) shift(plus) y <middles> <objects>",
"#-B": "<escape> g shift(question) <middles> <objects>", # Bguestion
"#": "<escape> g u <middles> <objects>",
}
<20> There is no need to learn all of them at once (so don't feel intimidated)
depending on how good this tutorial turns out I may make an advanced tutorial
for command letter covering all of these in the future.
==============================================================================
 vim:tw=78:ts=2:et:ft=help:norl:
